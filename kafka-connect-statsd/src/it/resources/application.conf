docker {

  zookeeper {
    image-name = "jplock/zookeeper:3.4.6"
    ready-checker {
      log-line = "binding to port"
    }
    port-maps {
      default-zookeeper-port {
        internal = 2181
      }
    }
  }

  kafka {
    image-name = "wurstmeister/kafka:0.10.1.1"
    environmental-variables = ["KAFKA_ADVERTISED_PORT=9092", "KAFKA_ADVERTISED_HOST_NAME=kafka", "KAFKA_AUTO_CREATE_TOPICS=true"]
    ready-checker {
      log-line = "started (kafka.server.KafkaServer)"
    }
    port-maps {
      default-kafka-port {
        internal = 9092
        external = 9092
      }
    }
  }

  kafkaconnect {
    image-name = "judo/kafka-connect:3.1.1-6"
    environmental-variables = ["CONNECT_BOOTSTRAP_SERVERS=kafka:9092","CONNECT_REST_ADVERTISED_HOST_NAME=kafkaconnect","CONNECT_REST_PORT=8082","CONNECT_GROUP_ID=judo-connect","CONNECT_CONFIG_STORAGE_TOPIC=JudoConnectConfig","CONNECT_OFFSET_STORAGE_TOPIC=JudoConnectOffsets","CONNECT_STATUS_STORAGE_TOPIC=JudoConnectStatus","CONNECT_KEY_CONVERTER=io.confluent.connect.avro.AvroConverter","CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL=http://schemaregistry:8081","CONNECT_VALUE_CONVERTER=io.confluent.connect.avro.AvroConverter","CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL=http://schemaregistry:8081","CONNECT_INTERNAL_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter", "CONNECT_INTERNAL_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter"]
    port-maps {
      default-kafkaconnect-port {
        internal = 8082
        external = 8082
      }
    }
  }

  schemaregistry {
    image-name = "confluentinc/cp-schema-registry:3.1.1"
    environmental-variables = ["SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181","SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081","SCHEMA_REGISTRY_HOST_NAME=schemaregistry","SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS=*","SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN=*"]
    port-maps {
      default-schemaregistry-port {
        internal = 8081
        external = 8081
      }
    }
  }
}